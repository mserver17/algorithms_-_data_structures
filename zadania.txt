Лаба №1:
1). Создание массива случайных элементов заданного в интерфейсе размера.
2). Функции поиска, вставки и удаления по случайному массиву.
3). Создание упорядоченного массива заданного в интерфейсе размера.
4). Функции поиска, двоичного поиска, вставки и удаления из упорядоченного массива.

Лаба №2:
1). Создание массива случайных элементов заданного в интерфейсе размера.
2). Реализация выбора алгоритма сортировки (вставками, выбором, слиянием, быстрая)
3). Возможность дублирования массива для применения одинакового массива для всех алгоритмов.

Лаба №3:
1). Создать калькулятор, обрабатывающий несколько действий за раз. Базовые операции: сложение, вычитание, умножение, деление, возведение в степень, выделение корня
2). Полноценный интерфейс, позволяющий вводить числовые и символьные значения, обработка отрицательных значений, ошибка при вводе текста.
3). Учёт порядка действий на основе скобок.
4). Реализация Back-end расчётов на основе стека при помощи обратной польской записи.
5*). (Дополнительные баллы): реализовать экспоненту, логарифм.
6*). (Дополнительные баллы): реализовать обработку чисел e и π
7*). (Дополнительные баллы): реализовать вычисление тригонометрических функций.

Лаба №4:
1). Дополнить функционал программы с массивами.
2). Возможность создавать списки и массивы с одинаковыми входными данными.
3). Реализовать перестановку двух конкретных элементов в массиве и списке (по значению).
4). Реализовать все три типа списков (связный, двусвязный, двусторонний) в целях проверки скорости перехода к следующему (для всех 3 типов) предыдущему (для двусвязного) и к последнему элементу (для двусвязного и двустороннего списков).
5). Должна иметься возможность вставить/удалить/найти элемент. Поиск должен быть реализован как по индексу, так и по значению.
6). Реализация сортированного списка методом вставки.

Лаба №5:
1). Создать  программу, реализующую поиск, вставку и удаление элементов в дереве и в красно-чёрном дереве.
2). Полноценный интерфейс, позволяющий вводить числовые и символьные значения, обработка отрицательных значений, ошибка при вводе текста. Интерфейс также должен обладать возможностью отображать ветви дерева. При выполнении операций на дереве оно должно перерисовываться и при необходимости перекрашиваться.

Лаба №6:
1). Создание хеш-таблицы из заданных (допустимо из предсозданных) элементов. 
2). Функции поиска, вставки и удаления по таблице.
3). Возможность задать размер хеш-таблицы перед её созданием (возможно с заданными ограничениями).
4). Реализация не менее двух различных хеш-функций для демонстрации разницы в скорости работы.
5). Реализация не менее двух методов пробирования данных.

Лаба №7:
    Задача 1
        1. Создать программу, в которую подаётся на вход сторона квадрата X
        2. Х - количество ячеек в таблице, которая заполняется случайными числами.
        3. Числа представляют из себя стоимость перехода в указанную ячейку. Так, например, если в ячейке (0;1) стоит число 5, то стоимость попадания в ячейку (0;1) из ячеек (0;0), (0;2) и (1,1) равна 5. Пересекать границы квадрата запрещено.
        4. Найти путь от верхнего левого угла до правого нижнего и подать его на выход, реализовав метод поиска кратчайшего пути Дейкстры

    Задача 2
        1. Создать программу, в которую подаётся на вход количество элементов графа X.
        2. Заполнить граф случайным количеством рёбер со случайными значениями весов.
        4. Вычислить минимальный остовной граф, вывести общую длинну остовного графа, проверить является исходный граф Гамильтоновым и Эйлеровым.
    
    Задача 3
        1. Создать приложение с картой размером минимум 12х12, задать координаты точек с помощью кривой Гильберта.
        2. При вводе точки на выходе пользователь должен получать окрестности точки (3, 5 или 8 точек в зависимости от расположения).
    
    Задача 4
    1. Реализовать программу, которая выполняет поиск на графе кратчайшего пути между двумя элементами при помощи алгоритмов Беллмана-Форда и А*.
